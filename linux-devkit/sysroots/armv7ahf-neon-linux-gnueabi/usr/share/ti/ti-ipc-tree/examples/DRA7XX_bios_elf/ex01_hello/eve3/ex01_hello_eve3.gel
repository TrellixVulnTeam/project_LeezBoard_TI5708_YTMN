/*
 * Copyright (c) 2013-2014 Texas Instruments Incorporated - http://www.ti.com
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 *  ======== ex01_hello_eve3.gel ========
 */

#define	UInt32	                unsigned int
#define	WR_MEM_32(addr, data)   *(UInt32*)(addr) = (UInt32)(data)
#define	RD_MEM_32(addr)         *(UInt32*)(addr)


/*
 *  TRM 19.5.2 MMU Registers
 *
 *  0000_0050   MMU_LOCK        Table 19-42
 *  [14:10]     BASEVALUE       Locked entries base value
 *  [8:4]       CURRENTVICTIM   Current entry to be updated
 *
 *  0000_0058   MMU_CAM         Table 19-46
 *  [31:12]     VTAG            Valid bit
 *  [3]         P               Preserved bit
 *                              0: TLB entry may be flushed
 *                              1: TLB entry is protected against flush
 *  [2]         V               Valid bit
 *                              0: TLB entry is invalid
 *                              1: TLB entry is valid
 *  [1:0]       PAGESIZE        Page size
 *                              0: Section (1 MB)
 *                              1: Large page (64 KB)
 *                              2: Small page (4 KB)
 *                              3: Supersection (16 MB)
 *
 *  0000_0058   MMU_RAM         Table 19-48
 *  [31:12]     PHYSICALADDR    Physical address of the page
 *  [11:0]      RESERVED
 */

#define EVE_MMU0        0x42281000      /* TRM 19.5 */
#define RM_EVE_RSTCTRL  0x4AE07BD0      /* TRM 3.11.41.1 */

menuitem "EVE MMU Configuration"

hotmenu ex01_hello_eve3_mmu_config()
{
    unsigned int val;
    unsigned int PHY_ADDR;

    PHY_ADDR = 0x80800000;

    GEL_TextOut("EVE3_mmu_config start...\n");

    /* map program vector table */
    WR_MEM_32(EVE_MMU0+0x58, 0x0000000E);      /* CAM (va|size) */
    WR_MEM_32(EVE_MMU0+0x5C, PHY_ADDR);        /* RAM (pa) */
    WR_MEM_32(EVE_MMU0+0x50, 0x2800);          /* MMU LOCK */
    WR_MEM_32(EVE_MMU0+0x54, 1);               /* MMU_LD_TLB */
    GEL_TextOut("EVE3_mmu_config: 0x0000_0000 --> 0x8000_0000 (4 KB)\n");

    /* map program load address */
    WR_MEM_32(EVE_MMU0+0x58, 0x8000000F);      /* CAM (va|size) */
    WR_MEM_32(EVE_MMU0+0x5C, 0x80000000);      /* RAM (pa) */
    WR_MEM_32(EVE_MMU0+0x50, 0x2810);          /* MMU LOCK */
    WR_MEM_32(EVE_MMU0+0x54, 1);               /* MMU_LD_TLB */
    GEL_TextOut("EVE3_mmu_config: 0x8000_0000 --> 0x8000_0000 (16 MB)\n");

    /* map SR_0 */
    WR_MEM_32(EVE_MMU0+0x58, 0x8E00000F);      /* CAM (va|size) */
    WR_MEM_32(EVE_MMU0+0x5C, 0x8E000000);      /* RAM (pa) */
    WR_MEM_32(EVE_MMU0+0x50, 0x2820);          /* MMU LOCK */
    WR_MEM_32(EVE_MMU0+0x54, 1);               /* MMU_LD_TLB */
    GEL_TextOut("EVE3_mmu_config: 0x8E00_0000 --> 0x8E00_0000 (16 MB)\n");

    /* map L3/L4 */
    WR_MEM_32(EVE_MMU0+0x58, 0x4800000F);      /* CAM (va|size) */
    WR_MEM_32(EVE_MMU0+0x5C, 0x48000000);      /* RAM (pa) */
    WR_MEM_32(EVE_MMU0+0x50, 0x2830);          /* MMU LOCK */
    WR_MEM_32(EVE_MMU0+0x54, 1);               /* MMU_LD_TLB */
    GEL_TextOut("EVE3_mmu_config: 0x4800_0000 --> 0x4800_0000 (16 MB)\n");

    /* map Control Module */
    WR_MEM_32(EVE_MMU0+0x58, 0x4A00000C);      /* CAM (va|size) */
    WR_MEM_32(EVE_MMU0+0x5C, 0x4A000000);      /* RAM (pa) */
    WR_MEM_32(EVE_MMU0+0x50, 0x2840);          /* MMU LOCK */
    WR_MEM_32(EVE_MMU0+0x54, 1);               /* MMU_LD_TLB */
    GEL_TextOut("EVE3_mmu_config: 0x4A00_0000 --> 0x4A00_0000 (1 MB)\n");

    /* map EVE Mailbox */
    WR_MEM_32(EVE_MMU0+0x58, 0x4200000F);      /* CAM (va|size) */
    WR_MEM_32(EVE_MMU0+0x5C, 0x42000000);      /* RAM (pa) */
    WR_MEM_32(EVE_MMU0+0x50, 0x2850);          /* MMU LOCK */
    WR_MEM_32(EVE_MMU0+0x54, 1);               /* MMU_LD_TLB */
    GEL_TextOut("EVE3_mmu_config: 0x4200_0000 --> 0x4200_0000 (16 MB)\n");

    /* disable walking logic */
    val = RD_MEM_32(EVE_MMU0+0x44);            /* MMU_CNTL */
    val &= 4;
    WR_MEM_32(EVE_MMU0+0x44, val);

    /* enable mmu */
    val = RD_MEM_32(EVE_MMU0+0x44);            /* MMU_CNTL */
    val |= 2;
    WR_MEM_32(EVE_MMU0+0x44, val);

    GEL_TextOut("EVE3_mmu_config done\n");

    /* setup reset vectors */
    *(unsigned int *)(PHY_ADDR + 0x0) = PHY_ADDR + 0x30;
    *(unsigned int *)(PHY_ADDR + 0x4) = PHY_ADDR + 0x30;
    *(unsigned int *)(PHY_ADDR + 0x8) = PHY_ADDR + 0x30;

    /* write idle instruction */
    *(unsigned int *)(PHY_ADDR + 0x30) = 0x0000037F;
    *(unsigned int *)(PHY_ADDR + 0x34) = 0x0000037F;

    /* release cpu from reset */
    *(unsigned int *)RM_EVE_RSTCTRL &= ~(0x1);

    GEL_TextOut("EVE3 cpu released from reset\n");
}
