/*
 * Copyright (c) 2013-2014, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 *  ======== Ipu2.cfg ========
 *  Platform: DRA7XX_linux_elf
 *  Target: ti.targets.arm.elf.M4
 */

/* root of the configuration object model */
var Program = xdc.useModule('xdc.cfg.Program');

/* build arguments for this executable */
var cfgArgs = Program.build.cfgArgs;
var configBld = xdc.loadCapsule(cfgArgs.configBld);

/* application uses the following modules and packages */
xdc.useModule('xdc.runtime.Assert');
xdc.useModule('xdc.runtime.Diags');
xdc.useModule('xdc.runtime.Error');
xdc.useModule('xdc.runtime.Log');
xdc.useModule('xdc.runtime.Registry');

xdc.useModule('ti.sysbios.hal.Cache');
xdc.useModule('ti.sysbios.knl.Task');



/*
 *  ======== IPC Configuration ========
 */
var IpcMgr = xdc.useModule('ti.ipc.ipcmgr.IpcMgr');
IpcMgr.transportCombo = IpcMgr.TransCombo_RPMSG;

xdc.useModule('ti.ipc.mm.MmServiceMgr');

/* describe the processors in the system */
var MultiProc = xdc.useModule('ti.sdo.utils.MultiProc');
MultiProc.setConfig("IPU2", ["HOST", "IPU2", "IPU1", "DSP2", "DSP1"]);

/* ti.grcm Configuration */
var RcmSettings = xdc.useModule('ti.grcm.Settings');
RcmSettings.ipc = RcmSettings.IpcSupport_ti_sdo_ipc;
xdc.useModule('ti.grcm.RcmServer');

/* register startup functions for each MmService */
var BIOS = xdc.useModule('ti.sysbios.BIOS');
BIOS.addUserStartupFunction('&IpcMgr_rpmsgStartup'); /* must be first */
BIOS.addUserStartupFunction('&MachVis_startup'); /* Machine Vision service */


/*
 *  ======== SYS/BIOS Configuration ========
 */
var BIOS = xdc.useModule('ti.sysbios.BIOS');

if (Program.build.profile == "debug") {
//  Bug in SYS/BIOS 6.35.01.29, dmtimer missing from pre-built libraries
//  BIOS.libType = BIOS.LibType_Instrumented;
    BIOS.libType = BIOS.LibType_Custom;
} else {
    BIOS.libType = BIOS.LibType_Custom;
}
BIOS.smpEnabled = true; /* only support SMP mode on IPU */

var Core = xdc.useModule('ti.sysbios.family.arm.ducati.Core');
Core.ipuId = 2;

var Task = xdc.useModule('ti.sysbios.knl.Task');
Task.common$.namedInstance = true;

/* Remap the interrupt xbar mmr base address to match AMMU settings */
var IntXbar = xdc.useModule('ti.sysbios.family.shared.vayu.IntXbar');
IntXbar.mmrBaseAddr = 0x6A002000;

/* default memory heap */
var Memory = xdc.useModule('xdc.runtime.Memory');
Memory.defaultHeapSize = 0x20000;

/*  Use SysMin because trace buffer address is required for Linux/QNX
 *  trace debug driver, plus provides better performance.
 */
var System = xdc.useModule('xdc.runtime.System');
var SysMin = xdc.useModule('ti.trace.SysMin');
System.SupportProxy = SysMin;
SysMin.bufSize  = 0x8000;

Program.sectMap[".tracebuf"] = "TRACE_BUF";
Program.sectMap[".errorbuf"] = "EXC_DATA";

/*  Configure external timer base address to match resource table mapping.
 */
var dmTimer = xdc.useModule('ti.sysbios.timers.dmtimer.Timer');
/* dmTimer 0 mapped to GPT1 */
dmTimer.timerSettings[0].baseAddr = 0x6AE18000;
/* dmTimer 1 mapped to GPT2 */
dmTimer.timerSettings[1].baseAddr = 0x68032000;
/* dmTimer 2 mapped to GPT3 */
dmTimer.timerSettings[2].baseAddr = 0x68034000;
/* dmTimer 3 mapped to GPT4 */
dmTimer.timerSettings[3].baseAddr = 0x68036000;
/* dmTimer 4 mapped to GPT5 */
dmTimer.timerSettings[4].baseAddr = 0x68820000;
/* dmTimer 5 mapped to GPT6 */
dmTimer.timerSettings[5].baseAddr = 0x68822000;
/* dmTimer 6 mapped to GPT7 */
dmTimer.timerSettings[6].baseAddr = 0x68034000;
/* dmTimer 7 mapped to GPT8 */
dmTimer.timerSettings[7].baseAddr = 0x68036000;
/* dmTimer 8 mapped to GPT9 */
dmTimer.timerSettings[8].baseAddr = 0x6803E000;
/* dmTimer 9 mapped to GPT10 */
dmTimer.timerSettings[9].baseAddr = 0x68086000;
/* dmTimer 10 mapped to GPT11 */
dmTimer.timerSettings[10].baseAddr = 0x68088000;
/* dmTimer 11 mapped to GPT12 */
dmTimer.timerSettings[11].baseAddr = 0x6AE20000;
/* dmTimer 12 mapped to GPT13 */
dmTimer.timerSettings[12].baseAddr = 0x68828000;
/* dmTimer 13 mapped to GPT14 */
dmTimer.timerSettings[13].baseAddr = 0x6882A000;
/* dmTimer 14 mapped to GPT15 */
dmTimer.timerSettings[14].baseAddr = 0x6882C000;
/* dmTimer 15 mapped to GPT16 */
dmTimer.timerSettings[15].baseAddr = 0x6882E000;

/* use external timers because they keep running when IPU is not */
var halTimer = xdc.useModule('ti.sysbios.hal.Timer');
halTimer.TimerProxy = dmTimer;

/*  Configure the SYS/BIOS clock to use external timer so that it keeps
 *  running when IPU is in low power mode. Must use TickSource_USER
 *  because we need special instance create parameters on the timer
 *  instance. Use dmTimer0 (GPTimer3) to driver the SYS/BIOS clock.
 */
var Clock = xdc.useModule('ti.sysbios.knl.Clock');
Clock.tickSource = Clock.TickSource_USER;
/* Configure GPTimer3 as BIOS clock source */
Clock.timerId = 2;

var Timer = xdc.useModule('ti.sysbios.timers.dmtimer.Timer');
var timerParams = new Timer.Params();
timerParams.period = Clock.tickPeriod;
timerParams.periodType = Timer.PeriodType_MICROSECS;
timerParams.tiocpCfg.idlemode = 0x3; /* smart-idle wake-up-capable mode */
timerParams.twer.ovf_wup_ena = 0x1; /* wake-up generation for overflow */
Timer.create(Clock.timerId, Clock.doTick, timerParams);

/* configure the IPU AMMU */
xdc.loadCapsule("IpuAmmu.cfg");


/*
 *  ======== Power Management Configuration ========
 */
xdc.loadPackage('ti.pm');
var Power = xdc.useModule('ti.sysbios.family.arm.ducati.smp.Power');
Power.loadSegment = "PM_DATA";

/* idle functions, power management functions should be last */
var Idle = xdc.useModule('ti.sysbios.knl.Idle');

/* function to flush unicache on each core */
Idle.addCoreFunc('&VirtQueue_cacheWb', 0);
Idle.addCoreFunc('&VirtQueue_cacheWb', 1);

/* power management idle functions for each core */
Idle.addCoreFunc('&IpcPower_idle', 0);
Idle.addCoreFunc('&IpcPower_idle', 1);

/*
 *  ======== Instrumentation Configuration ========
 */

/* system logger */
var LoggerSys = xdc.useModule('xdc.runtime.LoggerSys');
var LoggerSysParams = new LoggerSys.Params();
var Defaults = xdc.useModule('xdc.runtime.Defaults');
Defaults.common$.logger = LoggerSys.create(LoggerSysParams);

/* TODO: is this really needed */
var Text = xdc.useModule('xdc.runtime.Text');
Text.isLoaded = true;

/* enable runtime Diags_setMask() for non-XDC spec'd modules */
var Diags = xdc.useModule('xdc.runtime.Diags');
Diags.setMaskEnabled = true;

var Registry = xdc.useModule('xdc.runtime.Registry');
Registry.common$.diags_ENTRY = Diags.RUNTIME_OFF;
Registry.common$.diags_EXIT  = Diags.RUNTIME_OFF;
Registry.common$.diags_USER1 = Diags.ALWAYS_ON;
Registry.common$.diags_INFO  = Diags.ALWAYS_ON;
Registry.common$.diags_LIFECYCLE = Diags.ALWAYS_ON;
Registry.common$.diags_STATUS = Diags.ALWAYS_ON;

var Main = xdc.useModule('xdc.runtime.Main');
Main.common$.diags_ASSERT = Diags.ALWAYS_ON;
Main.common$.diags_INTERNAL = Diags.ALWAYS_ON;

/* enable exception callstack backtrace */
var Hwi = xdc.useModule('ti.sysbios.family.arm.m3.Hwi');
if (Program.build.profile == "debug") {
    Hwi.enableException = true;
}
Hwi.nvicCCR.DIV_0_TRP = 1;
