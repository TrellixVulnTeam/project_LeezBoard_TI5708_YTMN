/*
 * Copyright (c) 2012-2014 Texas Instruments Incorporated - http://www.ti.com
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 *  ======== Eve3.cfg ========
 *  Platform: DRA7XX_bios_elf
 *  Target: ti.targets.arp32.elf.ARP32_far
 */

/* root of the configuration object model */
var Program = xdc.useModule('xdc.cfg.Program');
var cfgArgs = Program.build.cfgArgs;
var RB = (cfgArgs.profile == "release" ? true : false);

/* application uses the following modules and packages */
xdc.useModule('xdc.runtime.Assert');
xdc.useModule('xdc.runtime.Diags');
xdc.useModule('xdc.runtime.Error');
xdc.useModule('xdc.runtime.Log');
xdc.useModule('xdc.runtime.Registry');
xdc.useModule('xdc.runtime.Timestamp');

xdc.useModule('ti.sdo.ipc.Notify');
xdc.useModule('ti.sdo.utils.MultiProc');

xdc.useModule('ti.sysbios.knl.Task');


/*
 *  ======== IPC Configuration ========
 */
xdc.global.procName = "EVE3";
xdc.loadCapsule("../shared/ipc_multiproc.cfg.xs");

/* select ipc libraries */
var Build = xdc.useModule('ti.sdo.ipc.Build');
//Build.libType = (RB ? Build.LibType_NonInstrumented : Build.LibType_Debug);
Build.libType = (RB ? Build.LibType_NonInstrumented : Build.LibType_Instrumented);
Build.assertsEnabled = (RB ? false : true);
Build.logsEnabled = (RB ? false : true);

/* configure the notify driver */
var NotifySetup = xdc.useModule('ti.sdo.ipc.family.vayu.NotifySetup');

NotifySetup.connections.$add(
    new NotifySetup.Connection({
        driver: NotifySetup.Driver_MAILBOX,
        procName: "DSP1"
    })
);

NotifySetup.connections.$add(
    new NotifySetup.Connection({
        driver: NotifySetup.Driver_MAILBOX,
        procName: "DSP2"
    })
);
NotifySetup.connections.$add(
    new NotifySetup.Connection({
        driver: NotifySetup.Driver_MAILBOX,
        procName: "EVE1"
    })
);
NotifySetup.connections.$add(
    new NotifySetup.Connection({
        driver: NotifySetup.Driver_MAILBOX,
        procName: "EVE2"
    })
);
NotifySetup.connections.$add(
    new NotifySetup.Connection({
        driver: NotifySetup.Driver_MAILBOX,
        procName: "EVE3"
    })
);
NotifySetup.connections.$add(
    new NotifySetup.Connection({
        driver: NotifySetup.Driver_MAILBOX,
        procName: "EVE4"
    })
);
NotifySetup.connections.$add(
    new NotifySetup.Connection({
        driver: NotifySetup.Driver_MAILBOX,
        procName: "IPU1"
    })
);
NotifySetup.connections.$add(
    new NotifySetup.Connection({
        driver: NotifySetup.Driver_MAILBOX,
        procName: "IPU2"
    })
);
NotifySetup.connections.$add(
    new NotifySetup.Connection({
        driver: NotifySetup.Driver_MAILBOX,
        procName: "HOST"
    })
);


/*
 *  ======== SYS/BIOS Configuration ========
 */

/* no rts heap */
Program.heap = 0;
Program.argSize = 100;  /* minimum size */
//Program.stack = 0x800; /* small stack needed to fit in DMEM */
Program.stack = 0x1000;

/* create a default heap */
var HeapMem = xdc.useModule('ti.sysbios.heaps.HeapMem');
var heapMemParams = new HeapMem.Params();
//heapMemParams.size = 0x1400;  /* small heap needed to fit in DMEM */
heapMemParams.size = 0x8000;

var Memory = xdc.useModule('xdc.runtime.Memory');
Memory.defaultHeapInstance = HeapMem.create(heapMemParams);

/* configure system module */
var SysMin = xdc.useModule('xdc.runtime.SysMin');
//SysMin.bufSize = 0x200;  /* small buffer needed to fit in DMEM */
SysMin.bufSize = 0x1000;
SysMin.flushAtExit = false;

var System = xdc.useModule('xdc.runtime.System');
System.SupportProxy = SysMin;

/* place text character table in external memory, too big for DMEM */
var Text_charTab = new prog.SectionSpec();
Text_charTab.loadSegment = "EVE3_PROG";
Program.sectMap[".const:xdc_runtime_Text_charTab__A"] = Text_charTab;

/* reduce size of idle stack, too big for DMEM */
var Task = xdc.useModule('ti.sysbios.knl.Task');
Task.idleTaskStackSize = 0x200;

var BIOS = xdc.useModule('ti.sysbios.BIOS');
BIOS.libType = (RB ? BIOS.LibType_NonInstrumented : BIOS.LibType_Instrumented);
// BIOS.libType = BIOS.LibType_Custom;
// BIOS.libType = BIOS.LibType_Debug;
BIOS.smpEnabled = false;


/*
 *  ======== Miscellaneous Configuration ========
 */

/* set default diags mask */
var Diags = xdc.useModule('xdc.runtime.Diags');
var Defaults = xdc.useModule('xdc.runtime.Defaults');

Defaults.common$.diags_ENTRY     = Diags.ALWAYS_OFF;
Defaults.common$.diags_EXIT      = Diags.ALWAYS_OFF;
Defaults.common$.diags_LIFECYCLE = Diags.ALWAYS_OFF;
Defaults.common$.diags_INTERNAL  = (RB ? Diags.ALWAYS_OFF : Diags.ALWAYS_ON);
Defaults.common$.diags_ASSERT    = (RB ? Diags.ALWAYS_OFF : Diags.ALWAYS_ON);
Defaults.common$.diags_STATUS    = Diags.RUNTIME_ON;
Defaults.common$.diags_USER1     = Diags.ALWAYS_OFF;
Defaults.common$.diags_USER2     = Diags.ALWAYS_OFF;
Defaults.common$.diags_USER3     = Diags.ALWAYS_OFF;
Defaults.common$.diags_USER4     = Diags.ALWAYS_OFF;
Defaults.common$.diags_USER5     = Diags.ALWAYS_OFF;
Defaults.common$.diags_USER6     = Diags.ALWAYS_OFF;
Defaults.common$.diags_INFO      = Diags.ALWAYS_OFF;
Defaults.common$.diags_ANALYSIS  = Diags.ALWAYS_OFF;

/* override diags mask for selected modules */
xdc.useModule('xdc.runtime.Main');
Diags.setMaskMeta(
    "xdc.runtime.Main",
    Diags.ENTRY | Diags.EXIT | Diags.INFO,
    Diags.RUNTIME_ON
);

var Registry = xdc.useModule('xdc.runtime.Registry');
Registry.common$.diags_ENTRY    = Diags.RUNTIME_OFF;
Registry.common$.diags_EXIT     = Diags.RUNTIME_OFF;
Registry.common$.diags_INFO     = Diags.RUNTIME_OFF;
Registry.common$.diags_ANALYSIS = Diags.RUNTIME_OFF;
Registry.common$.diags_USER1    = Diags.RUNTIME_OFF;

/* create a logger instance */
var LoggerBuf = xdc.useModule('xdc.runtime.LoggerBuf');
var loggerBufP = new LoggerBuf.Params();
loggerBufP.numEntries = 256;  /* 256 entries = 8 KB of memory */
loggerBufP.bufType = LoggerBuf.BufType_FIXED;

var appLogger = LoggerBuf.create(loggerBufP);
appLogger.instance.name = "AppLog";
Defaults.common$.logger = appLogger;
