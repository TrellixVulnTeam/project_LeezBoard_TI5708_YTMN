
#
# Check if required environment variables are defined
#
ifneq ($(MAKECMDGOALS),clean)

# Path to C6000 compiler tools
ifeq ($(CGTROOT),)
$(call error,ERROR - CGTROOT NOT DEFINED, PLEASE REFER TO README.txt)
endif

ifeq ($(XDC_DIR),)
$(call error,ERROR - XDC_DIR NOT DEFINED, PLEASE REFER TO README.txt)
endif

ifeq ($(XDAIS_DIR),)
$(call error,ERROR - XDAIS_DIR NOT DEFINED, PLEASE REFER TO README.txt)
endif

ifeq ($(BIOS_DIR),)
$(call error,ERROR - BIOS_DIR NOT DEFINED, PLEASE REFER TO README.txt)
endif

ifeq ($(IPC_DIR),)
$(call error,ERROR - IPC_DIR NOT DEFINED, PLEASE REFER TO README.txt)
endif

ifeq ($(OMP_DIR),)
$(call error,ERROR - OMP_DIR NOT DEFINED, PLEASE REFER TO README.txt)
endif

ifeq ($(PDK_DIR),)
$(call error,ERROR - PDK_DIR NOT DEFINED, PLEASE REFER TO README.txt)
endif

ifeq ($(FC_DIR),)
$(call error,ERROR - FC_DIR NOT DEFINED, PLEASE REFER TO README.txt)
endif

ifeq ($(EDMA3_DIR),)
$(call error,ERROR - EDMA3_DIR NOT DEFINED, PLEASE REFER TO README.txt)
endif

ifeq ($(LIBARCH_DIR),)
$(call error,ERROR - LIBARCH_DIR NOT DEFINED, PLEASE REFER TO README.txt)
endif

ifeq ($(LINALG_DIR),)
$(call error,ERROR - LINALG_DIR NOT DEFINED, PLEASE REFER TO README.txt)
endif

endif

DESTDIR = ../../

#
# --- Makefile initialization --------------------------------------------------
#

# Define the name of the configuration file.
CONFIG_MK_FILE     := config.mk

# Define the name of the file containing build and architecture-specific
# makefile definitions.
MAKE_DEFS_FILE     := make_defs.mk

# All makefile fragments in the tree will have this name.
FRAGMENT_MK        := .fragment.mk

# Locations of important files.
CONFIG_DIR         := config
FRAME_DIR          := frame
LIB_DIR            := lib



#
# --- Include makefile configuration file --------------------------------------
#

# Construct the path to the makefile configuration file that was generated by
# the configure script.
CONFIG_MK_PATH    := ../../$(CONFIG_MK_FILE)

# Include the configuration file.
-include $(CONFIG_MK_PATH)

# Detect whether we actually got the configuration file. If we didn't, then
# it is likely that the user has not yet generated it (via configure).
ifeq ($(strip $(CONFIG_MK_INCLUDED)),yes)
CONFIG_MK_PRESENT := yes
else
CONFIG_MK_PRESENT := no
endif

# Override the DIST_PATH value obtained from config.mk, since it is relative
# to the build directory.
DIST_PATH         := ..

# Now we have access to CONFIG_NAME, which tells us which sub-directory of the
# config directory to use as our configuration.
CONFIG_PATH       := $(DIST_PATH)/$(CONFIG_DIR)/$(CONFIG_NAME)
FRAME_PATH        := $(DIST_PATH)/$(FRAME_DIR)



#
# --- Include makefile definitions file ----------------------------------------
#

# Construct the path to the makefile definitions file residing inside of
# the configuration sub-directory.
MAKE_DEFS_MK_PATH := $(CONFIG_PATH)/$(MAKE_DEFS_FILE)

# Include the makefile definitions file.
-include $(MAKE_DEFS_MK_PATH)

# Detect whether we actually got the make definitios file. If we didn't, then
# it is likely that the configuration is invalid (or incomplete).
ifeq ($(strip $(MAKE_DEFS_MK_INCLUDED)),yes)
MAKE_DEFS_MK_PRESENT := yes
else
MAKE_DEFS_MK_PRESENT := no
endif



#
# --- Include makefile fragments -----------------------------------------------
#

# Initialize our list of directory paths to makefile fragments with the empty
# list. This variable will accumulate all of the directory paths in which
# makefile fragments reside.
FRAGMENT_DIR_PATHS :=

# This variable is used by the include statements as they recursively include
# one another. For the framework source tree ('frame' directory), we initialize
# it to the top-level directory since that is its parent.
PARENT_PATH        := $(DIST_PATH)

# Recursively include all the makefile fragments in the framework itself.
-include $(addsuffix /$(FRAGMENT_MK), $(FRAME_PATH))

# Now set PARENT_PATH to $(DIST_PATH)/config in preparation to include the
# fragments in the configuration sub-directory.
PARENT_PATH        := $(DIST_PATH)/$(CONFIG_DIR)

# Recursively include all the makefile fragments in the configuration
# sub-directory.
-include $(addsuffix /$(FRAGMENT_MK), $(CONFIG_PATH))

# Create a list of the makefile fragments.
MAKEFILE_FRAGMENTS := $(addsuffix /$(FRAGMENT_MK), $(FRAGMENT_DIR_PATHS))

# Detect whether we actually got any makefile fragments. If we didn't, then it
# is likely that the user has not yet generated them (via configure).
ifeq ($(strip $(MAKEFILE_FRAGMENTS)),)
MAKEFILE_FRAGMENTS_PRESENT := no
else
MAKEFILE_FRAGMENTS_PRESENT := yes
endif



#
# --- Compiler include path definitions ----------------------------------------
#

# Expand the fragment paths that contain .h files to attain the set of header
# files present in all fragment paths.
MK_HEADER_FILES := $(foreach frag_path, $(FRAGMENT_DIR_PATHS), \
                                        $(wildcard $(frag_path)/*.h))

# Strip the leading, internal, and trailing whitespace from our list of header
# files. This makes the "make install-headers" much more readable.
MK_HEADER_FILES := $(strip $(MK_HEADER_FILES))

# Expand the fragment paths that contain .h files, and take the first
# expansion. Then, strip the header filename to leave the path to each header
# location. Notice this process even weeds out duplicates! Add the config
# directory manually since it contains FLA_config.h.
MK_HEADER_DIR_PATHS := $(dir $(foreach frag_path, $(FRAGMENT_DIR_PATHS), \
                                       $(firstword $(wildcard $(frag_path)/*.h))))

# Add -I to each header path so we can specify our include search paths to the
# C compiler.
INCLUDE_PATHS   := $(strip $(patsubst %, -I%, $(MK_HEADER_DIR_PATHS)))
CFLAGS          := $(CFLAGS) $(INCLUDE_PATHS)

# BLIS library and header path. This is simply wherever it was installed.
BLIS_INC_PATH  := $(INSTALL_PREFIX)/include/blis

CL_OPTS  = -I$(BLIS_INC_PATH) -DCBLAS -DBLIS_TEST_DSP -DBLIS_MAX_NUM_THREADS=${NUM_DSP_CORES}

COMMON_FOLDER = ../../../../../../examples/dsponly/common

testfiles_obj = ticblas_config.obj fc_config_c6678.obj \
                test_addm.obj      test_dotxaxpyf.obj     test_her2.obj     test_scal2v.obj  test_syr2k.obj \
                test_addv.obj      test_dotxf.obj         test_her2k.obj    test_scalm.obj   test_syr.obj \
                test_axpy2v.obj    test_dotxv.obj         test_her.obj      test_scalv.obj   test_syrk.obj \
                test_axpyf.obj     test_gemm.obj          test_herk.obj     test_setm.obj    test_trmm3.obj \
                test_axpym.obj     test_gemmtrsm_ukr.obj  test_libblis.obj  test_setv.obj    test_trmm.obj \
                test_axpyv.obj     test_gemm_ukr.obj      test_normfm.obj   test_subm.obj    test_trmv.obj \
                test_copym.obj     test_gemv.obj          test_normfv.obj   test_subv.obj    test_trsm.obj \
                test_copyv.obj     test_ger.obj           test_randm.obj    test_symm.obj    test_trsm_ukr.obj \
                test_dotaxpyv.obj  test_hemm.obj          test_randv.obj    test_symv.obj    test_trsv.obj \
                test_dotv.obj      test_hemv.obj          test_scal2m.obj   test_syr2.obj

outfile = ../blistestDSP.out

LINALG_LIB  = ../../../lib/libcblas.ae66

include $(COMMON_FOLDER)/Makefile.common

%.obj: ../src/%.c
	$(CL) $(CL_OPTS) $<
	echo Compiling $<
