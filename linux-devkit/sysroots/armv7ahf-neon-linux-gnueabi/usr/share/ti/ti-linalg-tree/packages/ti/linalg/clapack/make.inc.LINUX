# -*- Makefile -*-
####################################################################
#  LAPACK make include file.                                       #
#  LAPACK, Version 3.2.1                                           #
#  June 2009		                                               #
####################################################################
#
# See the INSTALL/ directory for more examples.
#
SHELL = /bin/sh
#
#  The machine (platform) identifier to append to the library names
#
PLAT = _LINUX
#  
#  Modify the FORTRAN and OPTS definitions to refer to the
#  compiler and desired compiler options for your machine.  NOOPT
#  refers to the compiler options desired when NO OPTIMIZATION is
#  selected.  Define LOADER and LOADOPTS to refer to the loader
#  and desired load options for your machine.
#
#######################################################
# This is used to compile C libary
CC        = gcc
# if no wrapping of the blas library is needed, uncomment next line
#CC        = gcc -DNO_BLAS_WRAP
CFLAGS    = -g -I$(TOPDIR)/INCLUDE
LINKER    = ld
LOADER    = gcc
LOADOPTS  =
NOOPT     = -O0 -I$(TOPDIR)/INCLUDE
DRVCFLAGS = $(CFLAGS)
F2CCFLAGS = $(CFLAGS)
#######################################################################

#
# Timer for the SECOND and DSECND routines
#
# Default : SECOND and DSECND will use a call to the EXTERNAL FUNCTION ETIME
# TIMER    = EXT_ETIME
# For RS6K : SECOND and DSECND will use a call to the EXTERNAL FUNCTION ETIME_
# TIMER    = EXT_ETIME_
# For gfortran compiler: SECOND and DSECND will use a call to the INTERNAL FUNCTION ETIME
# TIMER    = INT_ETIME
# If your Fortran compiler does not provide etime (like Nag Fortran Compiler, etc...)
# SECOND and DSECND will use a call to the Fortran standard INTERNAL FUNCTION CPU_TIME 
TIMER    = INT_CPU_TIME
# If neither of this works...you can use the NONE value... In that case, SECOND and DSECND will always return 0
# TIMER     = NONE
#
#  The archiver and the flag(s) to use when building archive (library)
#  If you system has no ranlib, set RANLIB = echo.
#
ARCH     = ar
ARCHFLAGS= cr
RANLIB   = ranlib
#
#  The location of BLAS library for linking the testing programs.
#  The target's machine-specific, optimized BLAS library should be
#  used whenever possible.
#

# To use the Reference BLAS provided in CLAPACK
#BLASLIB      = ../../blas$(PLAT).a

# To use the reference BLIS without the CBLAS interface. The CC should have the define -DNO_BLAS_WRAP
#BLASLIB      = $(TOPDIR)/../blis/install/reference/lib/libblis.a

# To use the reference BLIS with the CBLAS interface. The CC should not have the define -DNO_BLAS_WRAP. 
# cblaswrap needs to be built.
BLASLIB      = ../../libcblaswr$(PLAT).a $(TOPDIR)/../cblas/lib/LINUX/libcblas$(PLAT).a $(TOPDIR)/../blis/install/reference/lib/libblis.a

#OLD calls for reference.
#BLASLIB      = ../../libcblaswr$(PLAT).a $(TOPDIR)/../../CBLAS/lib/cblas${PLAT}.a $(TOPDIR)/../../BLIS/lib/libblis--reference.a  
#BLASLIB      = ../../libcblaswr$(PLAT).a $(TOPDIR)/../cblas/lib/LINUX/libcblas$(PLAT).a $(TOPDIR)/../blis/install/reference/lib/libblis.a

#
#  Location of the extended-precision BLAS (XBLAS) Fortran library
#  used for building and testing extended-precision routines.  The
#  relevant routines will be compiled and XBLAS will be linked only if
#  USEXBLAS is defined.
#
# USEXBLAS    = Yes
XBLASLIB     =
# XBLASLIB    = -lxblas
#
#  Names of generated libraries.
#
LAPACKLIB    = lapack$(PLAT).a
F2CLIB       = $(TOPDIR)/F2CLIBS/libf2c$(PLAT).a 
TMGLIB       = tmglib$(PLAT).a
EIGSRCLIB    = eigsrc$(PLAT).a
LINSRCLIB    = linsrc$(PLAT).a
