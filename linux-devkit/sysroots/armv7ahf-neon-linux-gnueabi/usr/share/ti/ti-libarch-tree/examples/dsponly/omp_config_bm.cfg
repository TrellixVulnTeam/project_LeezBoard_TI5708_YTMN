/*
 * Copyright (c) 2012-2015, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */


/* Include OMP runtime in the build */
var omp = xdc.useModule("ti.runtime.openmp.Settings");

/* Set up section mappings */
var program = xdc.useModule('xdc.cfg.Program');
program.sectMap[".args"] = new Program.SectionSpec();
program.sectMap[".bss"] = new Program.SectionSpec();
program.sectMap[".cinit"] = new Program.SectionSpec();
program.sectMap[".cio"] = new Program.SectionSpec();
program.sectMap[".const"] = new Program.SectionSpec();
program.sectMap[".data"] = new Program.SectionSpec();
program.sectMap[".far"] = new Program.SectionSpec();
program.sectMap[".fardata"] = new Program.SectionSpec();
program.sectMap[".neardata"] = new Program.SectionSpec();
program.sectMap[".rodata"] = new Program.SectionSpec();
program.sectMap[".stack"] = new Program.SectionSpec();
program.sectMap[".switch"] = new Program.SectionSpec();
program.sectMap[".sysmem"] = new Program.SectionSpec();
program.sectMap[".text"] = new Program.SectionSpec();
    
/* Must place these sections in core local memory */
program.sectMap[".args"].loadSegment        = "L2SRAM";
program.sectMap[".cio"].loadSegment         = "L2SRAM";
program.sectMap[".stack"].loadSegment       = "L2SRAM";

/* Must place these sections in shared memory - DDR3/MSMC */
program.sectMap[".bss"].loadSegment         = "DDR3";
program.sectMap[".cinit"].loadSegment       = "DDR3";
program.sectMap[".const"].loadSegment       = "DDR3";
program.sectMap[".data"].loadSegment        = "DDR3";
program.sectMap[".far"].loadSegment         = "DDR3";
program.sectMap[".fardata"].loadSegment     = "DDR3";
program.sectMap[".neardata"].loadSegment    = "DDR3";
program.sectMap[".rodata"].loadSegment      = "DDR3";
program.sectMap[".sysmem"].loadSegment      = "DDR3";
program.sectMap[".switch"].loadSegment      = program.platform.codeMemory;
program.sectMap[".text"].loadSegment        = program.platform.codeMemory;
    
/* Size the default stack */
var deviceName = String(Program.cpu.deviceName);
if  (deviceName.search("DRA7XX") == -1) { program.stack = 0x20000; }
else                                    { program.stack = 0x08000; }

if  (deviceName.search("DRA7XX") == -1) { program.heap = 0x08000000; }
else                                    { program.heap = 0x00800000; }

