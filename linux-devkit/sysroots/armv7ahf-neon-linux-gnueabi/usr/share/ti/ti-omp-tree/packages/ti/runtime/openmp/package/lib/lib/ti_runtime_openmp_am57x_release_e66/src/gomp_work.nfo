TMS320C6x C/C++ Optimizer               v8.2.2
Build Number 1RK5R-2LI-VATAQ-TAR-C08D
Making tomp_invalidatePrefetchBuffer a function synonym of CSL_XMC_invalidatePrefetchBuffer
Making tomp_semAcquire a function synonym of AcquireSpinLock
Making tomp_semRelease a function synonym of ReleaseSpinLock

static unsigned char AcquireSpinLock() is called from 1 sites in this file.
    It appears to be inlineable (size = 13 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	<NONE>

static void CACHE_AsmNop() is called from 2 sites in this file.
    It appears to be inlineable (size = 5 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	<NONE>

static enum $$fake206 CACHE_getL2Size() is called from 1 sites in this file.
    It appears to be inlineable (size = 5 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	<NONE>

static void CACHE_invAllL2() is called from 1 sites in this file.
    It appears to be inlineable (size = 36 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	_restore_interrupts() (1 times)
	CACHE_AsmNop() (1 times)
	CACHE_invAllL2Wait() (1 times)
	CSL_XMC_invalidatePrefetchBuffer() (1 times)
	_disable_interrupts() (1 times)

static void CACHE_invAllL2Wait() is called from 1 sites in this file.
    It appears to be inlineable (size = 13 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	<NONE>

static void CACHE_wbInvAllL1d() is called from 1 sites in this file.
    It appears to be inlineable (size = 36 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	_restore_interrupts() (1 times)
	CACHE_AsmNop() (1 times)
	CACHE_wbInvAllL1dWait() (1 times)
	CSL_XMC_invalidatePrefetchBuffer() (1 times)
	_disable_interrupts() (1 times)

static void CACHE_wbInvAllL1dWait() is called from 1 sites in this file.
    It appears to be inlineable (size = 13 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	<NONE>

static void CSL_XMC_invalidatePrefetchBuffer() is called from 3 sites in this file.
    It appears to be inlineable (size = 4 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	<NONE>

static void ReleaseSpinLock() is called from 1 sites in this file.
    It appears to be inlineable (size = 9 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	<NONE>

static struct gomp_work_share *alloc_work_share() is called from 2 sites in this file.
    It appears to be inlineable (size = 9 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	tomp_event_pointer() (1 times)
	tomp_eventAllocChecked() (1 times)

static void free_work_share() is called from 4 sites in this file.
    It appears to be inlineable (size = 10 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	tomp_eventFree() (1 times)
	gomp_fini_work_share() (1 times)

extern void gomp_fini_work_share() is called from 1 sites in this file.
    It appears to be inlineable (size = 1 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	<NONE>

extern void gomp_init_work_share() is called from 2 sites in this file.
    It appears to be inlineable (size = 32 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	gomp_ptrlock_init() (1 times)
	memset() (1 times)

static void gomp_ptrlock_destroy() is called from 0 sites in this file.
    It appears to be inlineable (size = 1 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	<NONE>

static void *gomp_ptrlock_get() is called from 1 sites in this file.
    It appears to be inlineable (size = 18 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	tomp_mutex_unlock() (1 times)
	tomp_mutex_lock() (1 times)

static void gomp_ptrlock_init() is called from 1 sites in this file.
    It appears to be inlineable (size = 13 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	<NONE>

static void gomp_ptrlock_set() is called from 1 sites in this file.
    It appears to be inlineable (size = 8 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	tomp_mutex_unlock() (1 times)

extern void gomp_work_share_end() is called from 0 sites in this file.
    It appears to be inlineable (size = 50 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	tomp_waitAtBarrierWithFlush() (1 times)
	free_work_share() (2 times)
	tomp_incrementAtomic() (1 times)

extern void gomp_work_share_end_nowait() is called from 0 sites in this file.
    It appears to be inlineable (size = 47 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	free_work_share() (2 times)
	tomp_incrementAtomic() (1 times)

extern void gomp_work_share_init_done() is called from 0 sites in this file.
    It appears to be inlineable (size = 19 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	gomp_ptrlock_set() (1 times)

extern unsigned char gomp_work_share_start() is called from 0 sites in this file.
    It appears to be inlineable (size = 52 units)
    It has 4 non-trivial scope blocks nested 4 deep.
    It calls these functions:
	gomp_ptrlock_get() (1 times)
	gomp_init_work_share() (2 times)
	alloc_work_share() (2 times)

static struct _sw_queue_item *queuePop() is called from 1 sites in this file.
    It appears to be inlineable (size = 31 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	queue_mutex_unlock() (1 times)
	queue_mutex_lock() (1 times)

static void queuePushDesc() is called from 1 sites in this file.
    It appears to be inlineable (size = 19 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	queue_mutex_unlock() (1 times)
	queue_mutex_lock() (1 times)

static void queue_mutex_lock() is called from 2 sites in this file.
    It appears to be inlineable (size = 5 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	tomp_mutex_lock() (1 times)

static void queue_mutex_unlock() is called from 2 sites in this file.
    It appears to be inlineable (size = 5 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	tomp_mutex_unlock() (1 times)

static void tomp_cacheWbInvAll() is called from 1 sites in this file.
    It appears to be inlineable (size = 15 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	_restore_interrupts() (1 times)
	tomp_invalidatePrefetchBuffer() (1 times)
	CACHE_invAllL2() (1 times)
	CACHE_getL2Size() (1 times)
	tomp_mfence() (2 times)
	CACHE_wbInvAllL1d() (1 times)
	_disable_interrupts() (1 times)

static unsigned tomp_decrementAtomic() is called from 1 sites in this file.
    It appears to be inlineable (size = 28 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	tomp_semRelease() (1 times)
	tomp_mfence() (1 times)
	tomp_semAcquire() (2 times)

static struct _sw_queue_item *tomp_eventAlloc() is called from 1 sites in this file.
    It appears to be inlineable (size = 5 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	queuePop() (1 times)

static struct _sw_queue_item *tomp_eventAllocChecked() is called from 1 sites in this file.
    It appears to be inlineable (size = 13 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	tomp_logError() (1 times)
	tomp_eventAlloc() (1 times)

static void tomp_eventFree() is called from 1 sites in this file.
    It appears to be inlineable (size = 7 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	queuePushDesc() (1 times)

static void *tomp_event_pointer() is called from 1 sites in this file.
    It appears to be inlineable (size = 4 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	<NONE>

static unsigned tomp_incrementAtomic() is called from 2 sites in this file.
    It appears to be inlineable (size = 28 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	tomp_semRelease() (1 times)
	tomp_mfence() (1 times)
	tomp_semAcquire() (2 times)

static void tomp_invalidatePrefetchBuffer() is called from 1 sites in this file.
    It appears to be inlineable (size = 2 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	CSL_XMC_invalidatePrefetchBuffer() (1 times)

static void tomp_logError() is called from 1 sites in this file.
    It appears to be inlineable (size = 20 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	exit() (1 times)
	tomp_sendExitEvents() (1 times)
	printf() (1 times)

static void tomp_mfence() is called from 6 sites in this file.
    It appears to be inlineable (size = 9 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	<NONE>

static void tomp_mutex_lock() is called from 2 sites in this file.
    It appears to be inlineable (size = 9 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	tomp_semAcquire() (2 times)

static void tomp_mutex_unlock() is called from 3 sites in this file.
    It appears to be inlineable (size = 5 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	tomp_semRelease() (1 times)
	tomp_mfence() (1 times)

static unsigned char tomp_semAcquire() is called from 6 sites in this file.
    It appears to be inlineable (size = 4 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	AcquireSpinLock() (1 times)

static void tomp_semRelease() is called from 3 sites in this file.
    It appears to be inlineable (size = 4 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	ReleaseSpinLock() (1 times)

static void tomp_waitAtBarrier() is called from 1 sites in this file.
    It appears to be inlineable (size = 29 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	tomp_decrementAtomic() (1 times)
	tomp_completePendingTasks() (2 times)

static int tomp_waitAtBarrierWithFlush() is called from 1 sites in this file.
    It appears to be inlineable (size = 6 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	tomp_cacheWbInvAll() (1 times)
	tomp_waitAtBarrier() (1 times)
	tomp_mfence() (1 times)

>>>> WARNING - Function gomp_ptrlock_destroy() is not called and will not be compiled


These functions may be recursive:
	gomp_work_share_end()
	tomp_waitAtBarrierWithFlush()
	tomp_cacheWbInvAll()
	CACHE_invAllL2()
	CACHE_wbInvAllL1d()
	tomp_waitAtBarrier()
	gomp_work_share_start()
	alloc_work_share()
	tomp_eventAllocChecked()
	tomp_logError()

Function CACHE_invAllL2() will be specialized on these parameters:
	[1] wait == 0u;

Results of interprocedural value propagation:

   static void CACHE_invAllL2() has these parameter attributes:
      unsigned wait :     wait == 0u;

Function CACHE_wbInvAllL1d() will be specialized on these parameters:
	[1] wait == 0u;

Results of interprocedural value propagation:

   static void CACHE_wbInvAllL1d() has these parameter attributes:
      unsigned wait :     wait == 0u;

Function gomp_ptrlock_init() will be specialized on these parameters:
	[2] ptr == NULL;

Function tomp_eventAllocChecked() will be specialized on these parameters:
	[1] size == 80u;
	[3] line == 64;

Results of interprocedural value propagation:

   static struct _sw_queue_item *tomp_eventAllocChecked() has these parameter attributes:
      unsigned size :     size == 80u;
      int line :          line == 64;

Function tomp_logError() will be specialized on these parameters:
	[1] e == 2u;
	[3] line == 64;

Results of interprocedural value propagation:

   static void tomp_logError() has these parameter attributes:
      unsigned e :        long double == 2u;
      int line :          line == 64;
Inlineable function will be suppressed: tomp_event_pointer()
Inlineable function will be suppressed: tomp_invalidatePrefetchBuffer()
Inlineable function will be suppressed: tomp_semRelease()
Inlineable function will be suppressed: tomp_semAcquire()
Inlineable function will be suppressed: CACHE_wbInvAllL1d()
Inlineable function will be suppressed: CACHE_invAllL2()
Inlineable function will be suppressed: tomp_mutex_unlock()
Inlineable function will be suppressed: queue_mutex_unlock()
Inlineable function will be suppressed: queue_mutex_lock()
Inlineable function will be suppressed: tomp_waitAtBarrierWithFlush()
Inlineable function will be suppressed: gomp_ptrlock_set()
Inlineable function will be suppressed: CACHE_getL2Size()
Inlineable function will be suppressed: free_work_share()
Inlineable function will be suppressed: tomp_eventAllocChecked()
Inlineable function will be suppressed: tomp_eventAlloc()
Inlineable function will be suppressed: CACHE_AsmNop()
Inlineable function will be suppressed: tomp_eventFree()
Inlineable function will be suppressed: gomp_ptrlock_init()
Inlineable function will be suppressed: tomp_mutex_lock()
Inlineable function will be suppressed: tomp_mfence()
Inlineable function will be suppressed: CACHE_invAllL2Wait()
Inlineable function will be suppressed: CACHE_wbInvAllL1dWait()
Inlineable function will be suppressed: tomp_cacheWbInvAll()
Inlineable function will be suppressed: queuePushDesc()
Inlineable function will be suppressed: gomp_ptrlock_get()
Inlineable function will be suppressed: tomp_decrementAtomic()
Inlineable function will be suppressed: tomp_waitAtBarrier()
Inlineable function will be suppressed: queuePop()

These external functions are called but not defined here:
	printf()
	exit()
	memset()
	tomp_completePendingTasks()
	tomp_sendExitEvents()
	_disable_interrupts()
	_restore_interrupts()


There are -1 memory accesses with 0 dependences.


There are -1 memory accesses with 0 dependences.


There are -1 memory accesses with 0 dependences.


There are 14 memory accesses with 34 dependences.


There are -1 memory accesses with 0 dependences.


There are 17 memory accesses with 38 dependences.


There are 5 memory accesses with 4 dependences.


There are 5 memory accesses with 4 dependences.


There are -1 memory accesses with 0 dependences.


There are 31 memory accesses with 203 dependences.


There are -1 memory accesses with 0 dependences.


There are 47 memory accesses with 504 dependences.


== END OF INFO OUTPUT==
