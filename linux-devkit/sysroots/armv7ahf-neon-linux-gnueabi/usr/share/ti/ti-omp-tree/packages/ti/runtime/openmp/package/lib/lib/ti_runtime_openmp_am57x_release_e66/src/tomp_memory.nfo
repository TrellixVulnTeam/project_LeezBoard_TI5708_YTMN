TMS320C6x C/C++ Optimizer               v8.2.2
Build Number 1RK5R-2LI-VATAQ-TAR-C08D
Making tomp_semAcquire a function synonym of AcquireSpinLock
Making tomp_semRelease a function synonym of ReleaseSpinLock

static unsigned char AcquireSpinLock() is called from 1 sites in this file.
    It appears to be inlineable (size = 13 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	<NONE>

static void ReleaseSpinLock() is called from 1 sites in this file.
    It appears to be inlineable (size = 9 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	<NONE>

extern void _minit() is called from 3 sites in this file.
    It appears to be inlineable (size = 17 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	tomp_dsp_heap_init() (1 times)
	release_dsp_heap_lock() (2 times)
	acquire_dsp_heap_lock() (1 times)

static void acquire_dsp_heap_lock() is called from 1 sites in this file.
    It appears to be inlineable (size = 11 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	tomp_semAcquire() (1 times)

extern void *calloc() is called from 0 sites in this file.
    It appears to be inlineable (size = 10 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	__ti_dsp_calloc() (1 times)
	_minit() (1 times)

extern void free() is called from 0 sites in this file.
    It appears to be inlineable (size = 5 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	__ti_dsp_free() (1 times)

extern void *malloc() is called from 0 sites in this file.
    It appears to be inlineable (size = 7 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	__ti_dsp_malloc() (1 times)
	_minit() (1 times)

extern void *memalign() is called from 0 sites in this file.
    It appears to be inlineable (size = 10 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	__ti_dsp_memalign() (1 times)
	_minit() (1 times)

extern void *realloc() is called from 0 sites in this file.
    It appears to be inlineable (size = 8 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	__ti_dsp_realloc() (1 times)

static void release_dsp_heap_lock() is called from 2 sites in this file.
    It appears to be inlineable (size = 9 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	tomp_semRelease() (1 times)
	tomp_mfence() (1 times)

static void tomp_mfence() is called from 1 sites in this file.
    It appears to be inlineable (size = 9 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	<NONE>

static unsigned char tomp_semAcquire() is called from 1 sites in this file.
    It appears to be inlineable (size = 4 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	AcquireSpinLock() (1 times)

static void tomp_semRelease() is called from 1 sites in this file.
    It appears to be inlineable (size = 4 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	ReleaseSpinLock() (1 times)

Making unmodified global variable CONST:
	static int _memory_size = (int)&__TI_SYSMEM_SIZE;

Address of global variable is never taken:
	static const int _memory_size


Global variable is not modified in this file:
	static const int _memory_size


These functions may be recursive:
	calloc()
	free()
	malloc()
	memalign()
	_minit()
	realloc()
Inlineable function will be suppressed: tomp_semAcquire()
Inlineable function will be suppressed: tomp_semRelease()
Inlineable function will be suppressed: tomp_mfence()
Inlineable function will be suppressed: acquire_dsp_heap_lock()
Inlineable function will be suppressed: release_dsp_heap_lock()

These external functions are called but not defined here:
	__ti_dsp_realloc()
	__ti_dsp_memalign()
	__ti_dsp_malloc()
	__ti_dsp_free()
	__ti_dsp_calloc()
	tomp_dsp_heap_init()

Variable's value is constant in this file:
    static const int _memory_size = (int)&__TI_SYSMEM_SIZE;

There are -1 memory accesses with 0 dependences.


There are -1 memory accesses with 0 dependences.


There are -1 memory accesses with 0 dependences.


There are 3 memory accesses with 1 dependences.


There are -1 memory accesses with 0 dependences.


There are -1 memory accesses with 0 dependences.


There are -1 memory accesses with 0 dependences.


There are -1 memory accesses with 0 dependences.


== END OF INFO OUTPUT==
