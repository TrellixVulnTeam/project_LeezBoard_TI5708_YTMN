TMS320C6x C/C++ Optimizer               v8.2.2
Build Number 1RK5R-2LI-VATAQ-TAR-C08D
Making tomp_semAcquire a function synonym of AcquireSpinLock
Making tomp_semRelease a function synonym of ReleaseSpinLock
Making tomp_eventPush a function synonym of queuePushDesc
Making tomp_eventPop a function synonym of queuePop

static unsigned char AcquireSpinLock() is called from 1 sites in this file.
    It appears to be inlineable (size = 13 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	<NONE>

static void ReleaseSpinLock() is called from 1 sites in this file.
    It appears to be inlineable (size = 9 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	<NONE>

static struct _sw_queue_item *queuePop() is called from 2 sites in this file.
    It appears to be inlineable (size = 31 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	queue_mutex_unlock() (1 times)
	queue_mutex_lock() (1 times)

static void queuePushDesc() is called from 2 sites in this file.
    It appears to be inlineable (size = 19 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	queue_mutex_unlock() (1 times)
	queue_mutex_lock() (1 times)

static void queue_mutex_lock() is called from 2 sites in this file.
    It appears to be inlineable (size = 5 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	tomp_mutex_lock() (1 times)

static void queue_mutex_unlock() is called from 2 sites in this file.
    It appears to be inlineable (size = 5 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	tomp_mutex_unlock() (1 times)

static unsigned char tomp_dispatchEvent() is called from 4 sites in this file.
    It appears to be inlineable (size = 13 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	 ? () (1 times)
	tomp_eventPop() (1 times)

extern void tomp_dispatch_finish() is called from 0 sites in this file.
    It appears to be inlineable (size = 30 units)
    It has 4 non-trivial scope blocks nested 4 deep.
    It calls these functions:
	tomp_eventPush() (1 times)
	tomp_eventAlloc() (1 times)

extern unsigned char tomp_dispatch_is_finished() is called from 0 sites in this file.
    It appears to be inlineable (size = 13 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	tomp_eventFree() (1 times)
	tomp_eventPop() (1 times)

extern void tomp_dispatch_once() is called from 0 sites in this file.
    It appears to be inlineable (size = 74 units)
    It has 4 non-trivial scope blocks nested 4 deep.
    It calls these functions:
	tomp_dispatchEvent() (4 times)

static struct _sw_queue_item *tomp_eventAlloc() is called from 1 sites in this file.
    It appears to be inlineable (size = 5 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	queuePop() (1 times)

static void tomp_eventFree() is called from 1 sites in this file.
    It appears to be inlineable (size = 7 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	queuePushDesc() (1 times)

static struct _sw_queue_item *tomp_eventPop() is called from 2 sites in this file.
    It appears to be inlineable (size = 4 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	queuePop() (1 times)

static void tomp_eventPush() is called from 1 sites in this file.
    It appears to be inlineable (size = 6 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	queuePushDesc() (1 times)

static void tomp_mfence() is called from 1 sites in this file.
    It appears to be inlineable (size = 9 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	<NONE>

static void tomp_mutex_lock() is called from 1 sites in this file.
    It appears to be inlineable (size = 9 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	tomp_semAcquire() (2 times)

static void tomp_mutex_unlock() is called from 1 sites in this file.
    It appears to be inlineable (size = 5 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	tomp_semRelease() (1 times)
	tomp_mfence() (1 times)

static unsigned char tomp_semAcquire() is called from 2 sites in this file.
    It appears to be inlineable (size = 4 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	AcquireSpinLock() (1 times)

static void tomp_semRelease() is called from 1 sites in this file.
    It appears to be inlineable (size = 4 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	ReleaseSpinLock() (1 times)


These functions may be recursive:
	tomp_dispatch_once()
	tomp_dispatchEvent()
Inlineable function will be suppressed: tomp_eventPush()
Inlineable function will be suppressed: tomp_semRelease()
Inlineable function will be suppressed: tomp_eventPop()
Inlineable function will be suppressed: tomp_semAcquire()
Inlineable function will be suppressed: tomp_mutex_unlock()
Inlineable function will be suppressed: tomp_eventAlloc()
Inlineable function will be suppressed: queue_mutex_unlock()
Inlineable function will be suppressed: queue_mutex_lock()
Inlineable function will be suppressed: tomp_mutex_lock()
Inlineable function will be suppressed: tomp_eventFree()
Inlineable function will be suppressed: tomp_mfence()
Inlineable function will be suppressed: tomp_dispatchEvent()

These external functions are called but not defined here:
	 ? ()


		====== Unroll-and-jam Result Summary ======

LOOP#2 in tomp_dispatch_finish() fails to unroll-and-jam: Outer Loop has multiple blocks

		====== End Unroll-and-jam Result ======


		====== Unroll-and-jam Result Summary ======

LOOP#2 in tomp_dispatch_finish() fails to unroll-and-jam: Outer Loop has multiple blocks

		====== End Unroll-and-jam Result ======


There are -1 memory accesses with 0 dependences.


There are -1 memory accesses with 0 dependences.


There are 10 memory accesses with 10 dependences.


There are -1 memory accesses with 0 dependences.


There are 8 memory accesses with 6 dependences.


There are 10 memory accesses with 15 dependences.


There are 12 memory accesses with 78 dependences.


== END OF INFO OUTPUT==
