/*
 *  ======== package/cfg/edma3_drv_bios6_tda2xx_st_sample_pe66.cfg ========
 *  This generated configuration script runs the user's configuration script
 *  the context of a specific target and platform in order to generate
 *  all the files necessary to create an executable; e.g., linker command
 *  files, static C/C++ data structures, etc.
 */

/*
 *  ======== _applyChanges ========
 *  Changes that bring the build target to the state at the end of the build
 *  model
 */
function _applyChanges(obj, chgObj) {
    var wasSealed = false;
    if (obj.$sealed) {
        wasSealed = true;
        obj.$unseal();
    }
    for (var prop in chgObj) {
        if (typeof obj[prop] == 'object' && obj[prop] != undefined) {
            if ("$category" in obj[prop] && obj[prop].$category == "Vector") {
               obj[prop].length = chgObj[prop].length;
               for (var i = 0; i < chgObj[prop].length; i++) {
                   if (obj[prop].length < i + 1) {
                       obj[prop].length++;
                   }
                   obj[prop][i] = chgObj[prop][i];
               }
            }
            else {
        	_applyChanges(obj[prop], chgObj[prop]);
            }
	}
	else {
            obj[prop] = chgObj[prop];
	}
    }
    if (wasSealed) {
        obj.$seal();
    }
}

/*
 *  ======== _runescape ========
 *  Recursive unescape to decode serialized strings
 */
function _runescape(obj) {
    for (var i in obj) {
	if (obj[i] != null) {
	    if (typeof obj[i] == 'string') {
		obj[i] = unescape(obj[i]);
	    }
	    else if (typeof obj[i] == 'object') {
		_runescape(obj[i]);
	    }
	}
    }
}

/*
 *  ======== _getPlatCfg ========
 */
function _getPlatCfg() {
    var tmp = {
        externalMemoryMap: [
            [
                "CODE_CORE_DSP1",
                {
                    name: "CODE_CORE_DSP1",
                    base: 2198863872,
                    len: 7340032,
                    space: "code",
                    access: "RWX"
                }
            ],
            [
                "PRIVATE_DATA_CORE_DSP1",
                {
                    name: "PRIVATE_DATA_CORE_DSP1",
                    base: 2206203904,
                    len: 8388608,
                    space: "data",
                    access: "RWX"
                }
            ],
            [
                "SHARED_MEM",
                {
                    name: "SHARED_MEM",
                    base: 2717908992,
                    len: 16777216,
                    space: "data",
                    access: "RWX"
                }
            ],
            [
                "SHARED_FRAME_BUFFER",
                {
                    name: "SHARED_FRAME_BUFFER",
                    base: 2315255808,
                    len: 67108864,
                    space: "data",
                    access: "RWX"
                }
            ],
            [
                "SHARED_CTRL",
                {
                    name: "SHARED_CTRL",
                    base: 2684354560,
                    len: 16777216,
                    space: "code/data",
                    access: "RWX"
                }
            ],
            [
                "SHARED_LOG_MEM",
                {
                    name: "SHARED_LOG_MEM",
                    base: 2701131776,
                    len: 7340032,
                    space: "data",
                    access: "RWX"
                }
            ]
        ],
        codeMemory: "CODE_CORE_DSP1",
        dataMemory: "PRIVATE_DATA_CORE_DSP1",
        stackMemory: "PRIVATE_DATA_CORE_DSP1"
    };
    _runescape(tmp);
    return (tmp);
}
/*
 *  ======== _cfginit ========
 */
function _cfginit() {
    xdc.loadPackage('xdc.services.intern.cmd');
    var prog = xdc.om['xdc.cfg.Program'];

    /* initialize prog attrs from build model */
    var build = {
        profile: "release",
        cfgScript: "/oe/bld/build-CORTEX_1/arago-tmp-external-linaro-toolchain/work/am57xx_evm-linux-gnueabi/edma3-lld-rtos/2.12.05.30C-r0.1/git/examples/edma3_driver/evmtda2xx/rtsc_config/edma3_drv_bios6_tda2xx_st_sample.cfg",
        cfgHome: "edma3_drv_tda2xx_sample_configuro",
        cfgArgs: "null",
        cfgArgsEncoded: true,
        releases: {
            0: {
                name: "edma3_drv_tda2xx_sample_configuro",
                attrs: {
                    prefix: "",
                    label: "default"
                },
                otherFiles: {},
                excludeDirs: {}
            }
        },
        prelink: false
    };
    _runescape(build);
    build.cfgArgs = null;
    build.target = xdc.module("ti.targets.elf.C66");
    var targChange = {
        platform: "ti.platforms.evmDRA7XX%3ADSP_1",
        platforms: [
            "ti.platforms.evmDRA7XX%3ADSP_1"
        ],
        version: "ti.targets.elf.C66%7B1%2C0%2C8.2%2C2",
        extensions: {
            ".se66": {
                suf: ".se66",
                typ: "asm"
            },
            ".s66": {
                suf: ".s66",
                typ: "asm"
            },
            ".s674": {
                suf: ".s674",
                typ: "asm"
            },
            ".s64P": {
                suf: ".s64P",
                typ: "asm"
            },
            ".s64": {
                suf: ".s64",
                typ: "asm"
            },
            ".s62": {
                suf: ".s62",
                typ: "asm"
            }
        },
        rootDir: "/oe/bld/build-CORTEX_1/arago-tmp-external-linaro-toolchain/sysroots/x86_64-linux/usr/share/ti/cgt-c6x",
        lnkOpts: {
            suffix: "-w%20-c%20-m%20%24%28XDCCFGDIR%29/%24@.map%20-l%20%24%28rootDir%29/lib/libc.a%20--zero_init%3Doff%20%20--dynamic%20--retain%3D_Ipc_ResetVector"
        },
        ccOpts: {
            suffix: "%20-mi10%20-mo%20--symdebug%3Anone%20-O3"
        },
        rawVersion: "8.2.2"
    };
    _runescape(targChange);
    _applyChanges(build.target, targChange);

    prog.build = build;

    prog.name = "edma3_drv_bios6_tda2xx_st_sample.xe66";
    prog.cfgBase = "package/cfg/edma3_drv_bios6_tda2xx_st_sample_pe66";

    prog.endian = prog.build.target.model.endian;

    /* use the platform package's Platform module */
    var Platform = xdc.useModule("ti.platforms.evmDRA7XX.Platform");
    var platParams = _getPlatCfg();
    var invalidParams = [];
    for (var prop in platParams) {
        if (!(prop in Platform.PARAMS)) {
            delete platParams[prop];
            invalidParams.push(prop);
        }
    }
    prog.platformName = "ti.platforms.evmDRA7XX:DSP_1";
    prog.platform = Platform.create("DSP_1", platParams);
    for (var i = 0; i < invalidParams.length; i++) {
        Platform.$logWarning("The parameter '" + invalidParams[i] + "' is " +
            "passed to this platform instance through Build.platformTable, " +
            "but the instance does not have a configuration parameter with " +
            "that name.", prog.platform, "DSP_1");
    }

    /* record the executable's package name */
    prog.buildPackage = "edma3_drv_tda2xx_sample_configuro";

    /* record build-model information required during config generation */
    prog.$$bind("$$isasm", 0);
    prog.$$bind("$$isrom", 0);
    prog.$$bind("$$gentab", [
    ]);

    /* bind prog to an appropriate execution context */
    prog.cpu = prog.platform.getExeContext(prog);

    /* import the target's run-time support pkg */
    xdc.loadPackage("ti.targets.rts6000");
}

/* function to import the cfg script's package */
function _userscript(script) {
    var home;
    var spath;
    home = xdc.loadPackage("edma3_drv_tda2xx_sample_configuro");

    xdc.om.$$bind('$homepkg', home);

    var cfgScript = "/oe/bld/build-CORTEX_1/arago-tmp-external-linaro-toolchain/work/am57xx_evm-linux-gnueabi/edma3-lld-rtos/2.12.05.30C-r0.1/git/examples/edma3_driver/evmtda2xx/rtsc_config/edma3_drv_bios6_tda2xx_st_sample.cfg";
    if (!script) {
        utils.loadCapsule(cfgScript, false, spath);
    }
    else {
        /* set up the same environment that loadCapsule would */
        var $saveCsd = utils.csd;
        var $cfgFile = utils.findFile(cfgScript, spath);
        var cname = cfgScript;
        if ($cfgFile) {
            $cfgFile = java.io.File($cfgFile);
            utils.csd = $cfgFile.getParentFile().getCanonicalPath();
            cname = "" + $cfgFile.getCanonicalPath();
        }

        /* create the capsule object */
        var cap = {
            prototype:  utils.global,
            $path:      cname,
            $private:   {path: cname},
            $capsule:   undefined,      /* set to cap below */
        };

        /* 'this.$capsule' is always cap object */
        cap.$capsule = cap;

        /* save the capsule object */
        utils.$$capmap[cname] = cap;

        try {
            var cx =
                Packages.org.mozilla.javascript.Context.getCurrentContext();
            var rdr = new
                java.io.BufferedReader(new java.io.StringReader(script));
            Packages.config.Shell.evaluateLoad(cx, cap, rdr, cname, 1);
        }
        finally {
            rdr.close();
            utils.csd = $saveCsd;
        }
    }
}

function _postinit() {
    var cout = null;

    var Program = xdc.om['xdc.cfg.Program'];
    /* get the exec command for this executable */
    if (Program.execCmd == null) {
        Program.execCmd = Program.platform.getExecCmd(Program,
            xdc.om["ti.platforms.evmDRA7XX"].packageBase);
    }
    cout = "define EXEC." + Program.name + '\n\n';
    cout += Program.execCmd;
    cout += "\nendef\n\n";

    /* if SourceDir generates a makefile, we need to run it */
    _genSourceDirMak("package/cfg/edma3_drv_bios6_tda2xx_st_sample_pe66", "edma3_drv_bios6_tda2xx_st_sample.pe66");

    utils.genDep("package/cfg/edma3_drv_bios6_tda2xx_st_sample_pe66", "edma3_drv_tda2xx_sample_configuro", utils.loadedFiles, cout, null);
}

function _genSourceDirMak(cfgBase, cfgName)
{
    var SourceDir = xdc.om['xdc.cfg.SourceDir'];

    if (SourceDir && SourceDir.$instances.length > 0) {
        /* construct rule to run SourceDir generated makefile */
        var make = "\t$(MAKE) -f "
            + SourceDir.outputDir + "/" + SourceDir.makefileName;

        /* this file is included by package.mak (if it exists) */
        var file = new java.io.File(cfgBase + ".cfg.mak");
        file["delete"]();
        var out = new java.io.BufferedWriter(new java.io.FileWriter(file));

        /* add rules to run SourceDir generated makefile */
        out.write("# invoke SourceDir generated makefile for " + cfgName
            + "\n" + cfgName + ": .libraries," + cfgName
            + "\n.libraries," + cfgName + ": " + cfgBase + ".xdl\n"
            + make + "\n\n"
            + "clean::\n" + make + " clean\n\n"
        );
        out.close();
        out = null;
    }
}
