/*
 *
 * Copyright (C) 2015 Texas Instruments Incorporated - http://www.ti.com/
 *
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions
 *  are met:
 *
 *    Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 *    Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the
 *    distribution.
 *
 *    Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 *
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 *  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 *  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 *  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 *  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 *  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
*/

#define __CL_ENABLE_EXCEPTIONS
#include<opencv2/opencv.hpp>
#include <CL/cl.hpp>
#include <cmath>
#include <cstring>
#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <iomanip>
#include <time.h>
#include <unistd.h>
#include <pthread.h>
#include "ocl_util.h"
/* This header file is autogenerated by cl compilation - includes DSP code: */
#include "phillips.dsp_h"

#include "WaveSimulationThread.h"
//#define GUI_OK

WaveSimulationThread::WaveSimulationThread (void *Inst)
{
    // Initialize variables(s)
    wavesimCtrl_t *inst = (wavesimCtrl_t *)Inst;
    this->wavesimCtrl.tMax = inst->tMax;
    this->wavesimCtrl.windSpeed = inst->windSpeed;
    this->wavesimCtrl.windDir = inst->windDir;

    doStop=false;
    throttleFlag = false;

    this->waveSimulationOn = false;
}

void WaveSimulationThread::setStm(int *stmVar)
{
    gl_stopped = stmVar;
}

void WaveSimulationThread::run()
{
    while(1)
    {
	////////////////////////////////
	// Stop thread if doStop=TRUE //
	////////////////////////////////
	doStopMutex.lock();
	if(doStop)
	{
	    doStop=false;
	    doStopMutex.unlock();
	    break;
	}
	doStopMutex.unlock();

        if(waveSimulationOn) {
          wavesim();
        } else {
          yieldCurrentThread();
        }
  }
//  qDebug() << "Stopping wave simulation thread...";
}

void WaveSimulationThread::stop()
{
    QMutexLocker locker(&doStopMutex);
    doStop=true;
}

void WaveSimulationThread::updateParams(int handOpened)
{
    if (handOpened > 0) {
       waveSimulationOn = true;
    }
    wavesimCtrl.windSpeed = 2.5f + 1.5f * (float)handOpened;
}

void WaveSimulationThread::throttle(void)
{
    throttleFlag = true; // Flag to indicate request for 100ms sleep
}

using namespace cl;
using namespace std;

#define  FFTSZ (256)
#define  PATCH_SIZE (64)
/******************************************************************************
* Function for generating Specialized sequence of twiddle factors
******************************************************************************/
static void tw_gen(float *w, int n)
{
    int i, j, k;
    const double PI = 3.141592654;

    for (j = 1, k = 0; j <= n >> 2; j = j << 2)
    {
        for (i = 0; i < n >> 2; i += j)
        {
            w[k]     = (float) sin (2 * PI * i / n);
            w[k + 1] = (float) cos (2 * PI * i / n);
            w[k + 2] = (float) sin (4 * PI * i / n);
            w[k + 3] = (float) cos (4 * PI * i / n);
            w[k + 4] = (float) sin (6 * PI * i / n);
            w[k + 5] = (float) cos (6 * PI * i / n);
            k += 6;
        }
    }
}

/* ======================================================================== */
/*  Initialized arrays with fixed test data.                                */
/* ======================================================================== */
static float w[2*FFTSZ];
static cl_float2 hField0[FFTSZ * FFTSZ];
static cl_float2 hField0_spectrum[FFTSZ * FFTSZ];
static cl_float2 hFieldT[FFTSZ * FFTSZ];
static float mag_hField[FFTSZ * FFTSZ];

/* Convert magnitude of complex height map */
static void convertCplx2Mag(float *hf, float *mag_hField)
{
float hf_x, hf_y;

   for (int i = 0; i < (FFTSZ * FFTSZ); i ++)
   {
        hf_x = hf[2 * i + 0];
        hf_y = hf[2 * i + 1];
        mag_hField[i] = sqrt(hf_x * hf_x + hf_y * hf_y);
   }
}

/* ======================================================================== */
/*  MAIN -- Top level driver for the test.                                  */
/* ======================================================================== */
void* WaveSimulationThread::wavesim ()
{
   float tMax      = wavesimCtrl.tMax;
   float windSpeed = wavesimCtrl.windSpeed;
   float windDir   = wavesimCtrl.windDir;


   tw_gen (w, FFTSZ);               // Generate twiddle factors
   try
   {
     Context context(CL_DEVICE_TYPE_ACCELERATOR);
     std::vector<Device> devices = context.getInfo<CL_CONTEXT_DEVICES>();

     int d = 0;
     int bufsize = sizeof(float) * (2*FFTSZ);
     /*---------------------------------------------------------------------
     * Compile the Kernel Source for the devices
     *--------------------------------------------------------------------*/
     /* Select and build DSP program from string */
     Program::Binaries   binary(1, std::make_pair(phillips_dsp_bin, sizeof(phillips_dsp_bin)));
     Program             program = Program(context, devices, binary);
     program.build(devices);
     /* Declare buffers on DSP side, this curves out buffers in DSP memory */
     Buffer bufW(context, CL_MEM_READ_ONLY,  bufsize);
     Buffer bufHfield0(context, CL_MEM_WRITE_ONLY, sizeof(hField0));
     Buffer bufHfield0_spectrum(context, CL_MEM_READ_WRITE, sizeof(hField0_spectrum));
     Buffer bufHfieldT(context, CL_MEM_WRITE_ONLY, sizeof(hFieldT));

     float lastWindSpeed=-1;
     while(1)
     {
       windSpeed = wavesimCtrl.windSpeed;
       cout << "wavesim: windSpeed is " << setprecision(4) << windSpeed << endl;
       /* Create command queue - this will stay the same for multiple iterations */
       CommandQueue Q(context, devices[d], CL_QUEUE_PROFILING_ENABLE);
       Event e3,e4,e5;
       std::vector<Event> evs(2);
       struct timespec start_time, end_time;

       /* Select HeightMap generation function to use */
       Kernel hMap(program, "ocl_genHMap");
       hMap.setArg(0, bufHfield0);
       hMap.setArg(1, bufHfield0_spectrum);
       hMap.setArg(2, bufW);
       hMap.setArg(3, PATCH_SIZE); // Patch, or tiling size
       hMap.setArg(4, windSpeed);
       hMap.setArg(5, windDir);

       clock_gettime(CLOCK_MONOTONIC, &start_time);
       Q.enqueueWriteBuffer(bufW, CL_FALSE, 0, bufsize, w, 0, &evs[0]);
       Q.enqueueTask       (hMap,  NULL, &e3);
       yieldCurrentThread();
       Q.enqueueReadBuffer (bufHfield0, CL_TRUE, 0, sizeof(hField0), hField0, 0, &e4);
       Q.enqueueReadBuffer (bufHfield0_spectrum, CL_TRUE, 0, sizeof(hField0_spectrum), hField0_spectrum, 0, &e5);
       //ocl_event_times(e3, "OCL: Phillips");
       //ocl_event_times(e4, "OCL: Read HeightMap");
       //ocl_event_times(e5, "OCL: Read HeightMap Spectrum");
       convertCplx2Mag((float *)hField0, mag_hField);
       emit updateHeightMap(mag_hField, FFTSZ*FFTSZ);   
       lastWindSpeed = windSpeed;

       for (float t = 0.0f; t < tMax; t += 0.05f)
       {
         if(doStop) return NULL;
         if(*gl_stopped == 2) { //Keep loop alive but do not spend cycles
           emit updateHeightMap(NULL, 0);
           msleep(120.0f);
           continue;   
         }
         /* Select HeightMap generation function to use */
         Kernel hMapT(program, "ocl_updateHMap");
         hMapT.setArg(0, bufW);
         hMapT.setArg(1, bufHfield0_spectrum);
         hMapT.setArg(2, bufHfieldT);
         hMapT.setArg(3, t);
         hMapT.setArg(4, PATCH_SIZE);
         Q.enqueueWriteBuffer(bufW, CL_FALSE, 0, bufsize, w, 0, &evs[0]);
         Q.enqueueWriteBuffer(bufHfield0, CL_FALSE, 0, sizeof(hField0), hField0, 0, &evs[1]);
         Q.enqueueTask       (hMapT,  NULL, &e3);
         yieldCurrentThread();
         Q.enqueueReadBuffer (bufHfieldT, CL_TRUE, 0, sizeof(hFieldT), hFieldT, 0, &e4);
         convertCplx2Mag((float *)hFieldT, mag_hField);
         if(throttleFlag) {
           msleep(60.0f); // Do some throttling to equalize OpenCL data writting and OpenGL reading
           throttleFlag = false;
         }
         emit updateHeightMap(mag_hField, FFTSZ*FFTSZ);   
         if (wavesimCtrl.windSpeed != lastWindSpeed) break;
       }
       clock_gettime(CLOCK_MONOTONIC, &end_time);
       /* Collect statistics */
       //double time_diff = (double)(end_time.tv_sec - start_time.tv_sec) * 1000000.0 + ((double)end_time.tv_nsec - (double)start_time.tv_nsec) * 0.001;
       //cout << "OCL: Total time " << time_diff << " us\n";
     }
   }
   catch (Error err)
   { cerr << "OCL: ERROR: " << err.what() << "(" << err.err() << ")" << endl; }

   std::cout << "OCL: Done!" << std::endl;
   return NULL;
}
/* nothing past this point */

